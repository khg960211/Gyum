강남역에 엄청난 폭우가 쏟아진다고 가정합시다. 정말 재난 영화에서나 나올 법한 양의 비가 내려서, 고층 건물이 비에 잠길 정도입니다.

그렇게 되었을 때, 건물과 건물 사이에 얼마큼의 빗물이 담길 수 있는지 알고 싶은데요. 그것을 계산해 주는 함수 trapping_rain을 작성해 보려고 합니다.

함수 trapping_rain은 건물 높이 정보를 보관하는 리스트 buildings를 파라미터로 받고, 담기는 빗물의 총량을 리턴해 줍니다.

예를 들어서 파라미터 buildings로 [3, 0, 0, 2, 0, 4]가 들어왔다고 합시다. 그러면 0번 인덱스에 높이 3의 건물이, 3번 인덱스에 높이 2의 건물이, 5번 인덱스에 높이 4의 건물이 있다는 뜻입니다. 1번, 2번, 4번 인덱스에는 건물이 없습니다.

그러면 아래의 사진에 따라 총 10 만큼의 빗물이 담길 수 있습니다. 따라서 trapping_rain 함수는 10을 리턴하는 거죠.




이번에는 파라미터 buildings로 [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]가 들어왔다고 합시다. 그러면 아래의 사진에 따라 총 6 만큼의 빗물이 담길 수 있습니다. 따라서 trapping_rain 함수는 6을 리턴하는 거죠.

이 정보를 기반으로, trapping_rain 함수를 작성해 보세요!

Brute Force 단원에서는 이 문제를 시간 복잡도 O(n2)로 풀었었는데요, 더 많은 공간을 쓰더라도 조금 더 효율적인 시간 복잡도로 문제를 풀어볼까요?

힌트 1.
Brute Force 방식으로 문제를 풀었을 때를 생각해봅시다.

For 문으로 빗물 리스트를 돌면서, 각 요소마다

현재 인덱스의 왼쪽에서 가장 높은 건물의 높이를 구한다
현재 인덱스의 오른쪽에서 가장 높은 건물의 높이를 구한다
그 중 더 낮은 건물의 높이를 구한다
그 높이에서 현재 인덱스에 있는 건물의 높이를 뺀다
이렇게 각 인덱스에 쌓인 빗물의 양을 확인했네요.

혹시 어딘가에서 불필요한 계산을 하고 있는지 생각해보면서 시간 복잡도를 단축할 수 있는 방법에 대해서 생각해보세요!

힌트 2.
현재 인덱스의 왼쪽에서 가장 높은 건물의 높이를 구한다
현재 인덱스의 오른쪽에서 가장 높은 건물의 높이를 구한다
이 두 단계가 각각 O(n)씩 걸렸는데요. 이 부분을 더 효율적으로 구할 수 있지 않을까요?

힌트3.
아래와 같이 두 리스트를 미리 만들어놓으면, 쌓이는 빗물 양을 구할 때는 그냥 여기 저장되어 있는 값들을 호출할 수 있습니다.

left_list: 각 인덱스의 왼쪽에서 가장 높은 건물의 높이
right_list: 각 인덱스의 오른쪽에서 가장 높은 건물의 높이
left_list[i]에는 i 인덱스 기준 왼쪽으로 가장 높은 건물의 높이가 저장되어 있는 거죠.

left_list를 위 설명대로 채워봅시다.

0 번째 인덱스에는 0을 저장합니다. 이 건물의 왼쪽은 비었으니까요.

인덱스 i 왼쪽에서 가장 높은 건물의 높이는

인덱스 i - 1 왼쪽에서 제일 높은 건물의 높이
인덱스 i - 1의 건물 높이
이 두 값들 중 더 큰 값이죠? left_list[i]에는 left_list[i - 1] 와 buildings[i - 1]를 비교해서 더 큰 값을 저장하면 되겠네요. For문으로 돌면서 left_list의 1 번째 인덱스부터 마지막 인덱스까지 각 i 번째 인덱스에 left_list[i - 1]과 buildings[i - 1] 중 큰 값을 채워넣으면 됩니다.

right_list도 비슷하게 채우면 되겠네요.

힌트4.
이제 각 인덱스 별로 왼쪽 오른쪽으로 가장 높은 건물의 높이를 저장해놨으니까 각 인덱스에 쌓이는 빗물의 양을 구할 때 이 값들을 호출해주면 됩니다.

인덱스 i에 고이는 빗물의 양을 구하고 싶으면 left_list[i]에는 인덱스 i의 왼쪽에서 가장 높은 건물의 높이가 저장되어 있고, right_list[i]에는 인덱스 i의 오른쪽에서 가장 높은 건물의 높이가 저장되어 있기 때문에,

min(left_list[i], right_max[i]) - buildings[i]

를 계산하면 되겠죠? (이 값이 0보다 작은 경우, 인덱스에 담기는 빗물은 0)

힌트를 종합해서 코드를 직접 써보세요!


시간 복잡도
인풋 buildings의 길이를 n이라고 부릅시다.

각 for 문의 반복 횟수는 n에 비례합니다. n에 비례하는 for 문이 세 개여도 결국 다 n에 비례하기 때문에 trapping_rain 함수의 시간 복잡도는 O(n)입니다.

공간 복잡도
n에 비례하는 길이의 리스트 2개를 사용하기 때문에 공간 복잡도는 O(n)이 됩니다.